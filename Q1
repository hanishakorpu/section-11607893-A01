#include<stdio.h>
#include<conio.h>
struct process{
	int p_id;
	int p_arrtime;
	int p_btime;
	int complete;
}p[10];

int main(){
	int number,i,j,process_time=0,process_id;
	int ready_q[10],final_q[10],minimum_pt=0,minpid;
	printf("Enter no of processes: ");
	scanf("%d",&number);
	for(i=0;i<number;i++){
		ready_q[i]=-1;
	}
	
	printf("\nenter process araival time amd burst time :: \n");
	for(i=0;i<number;i++){
		p[i].p_id = i;
		printf("\nProcess P%d",i+1);
		printf("\n	Enter arrival time :");
		scanf("%d",&p[i].p_arrtime);
		printf("	Enter burst time :");
		scanf("%d",&p[i].p_btime);
		p[i].complete = 0;
	}
	j=0;
	for(i=0;i<number;i++){
		if(p[i].p_arrtime<=process_time && p[i].complete==0){
			p[i].p_btime -=3;
			process_time+=3;
			if(p[i].p_btime<=0){
				p[i].complete = 1;
				ready_q[j]=-1;
			}
			if(p[i].complete == 0){
				j++;
				ready_q[j]=p[i].p_id;
			}
		}
		j++;
		
	}
		printf("\n\nAfter the first iteration  ::");
		for(i=0;i<number;i++){
		if(p[i].p_btime>0){
		   		minimum_pt=p[i].p_btime;
		   		minpid=p[i].p_id;
			}
		}
	
	if(minimum_pt!=0){
		printf("\nminimum process time required %d",minimum_pt);
		printf("\nminpid value %d",minpid);
	}
	else{
		printf("All process are already finished in first iteration");
	}
	
	j=0;
	for(i=0;i<number;i++){
		if(p[i].p_arrtime<=process_time && p[i].complete==0){
			p[i].p_btime -=6;
			process_time+=6;
			if(p[i].p_btime<=0){
				p[i].complete = 1;
				ready_q[j]=-1;
			}
			if(p[i].complete == 0){
				j++;
				ready_q[j]=p[i].p_id;
			}
		}
		j++;
	}
	
	printf("\n\n after second iteration ::  ");
	for(i=0;i<number;i++){
		if(p[i].p_btime>0){
		   		minimum_pt=p[i].p_btime;
		   		minpid=p[i].p_id;
		}
	}
	
	if(minimum_pt!=0){
		printf("\nminimum process tim required %d",minimum_pt);
		printf("\nminpid value %d",minpid);
	}
	else{
		printf("All process are already finished in second iteration");
	}
	return 0;
}
